/* css파일을 작성하기 전 기존에 이미 들어가 있는 속성값들을 초기화 하고, 폰트 지정과 같은 반복되는 것들의 기본 값들을 설정하는 css 파일 */
@import url(//spoqa.github.io/spoqa-han-sans/css/SpoqaHanSansNeo.css);
*{
	margin:0;
	padding:0;
	box-sizing: border-box;
	font-family: 'Spoqa Han Sans Neo', 'sans-serif'; }

/* 반응형 웹을 만들때 rem을 사용하는데 기본적인 브라우저의 font-size는 16px이기 때문에 예를 드어 1.5rem했을 때 정확히 몇 px인지 계산이 어렵다. 따라서 아래와 같이 font-size를 62.5%로 하면 기본 font-size가 10px이 되어 rem계산이 쉬워 진다. */
html,body {
	font-size:62.5%;
}

ul {
	list-style-type: none;
}
a {
	text-decoration:none;
	color:rgb(73, 73, 73)
}

.header {
  height: 10rem;
  position:relative;
  max-width: 1200px;
  margin:auto;
}
/* %를 사용할 때는 부모 요소에 너비나 높이가 지정이 되어 있는지 확인 부터 하자. */
.header {
  display: flex;
  justify-content: space-between;
  height: 100%;
}

.header h1 {
  font-size: 4.2rem;
  text-transform: uppercase;
}

.header .nav {
  display: flex;
  align-items: flex-end;
  padding-bottom: 2rem;
}

.header .nav li {
  margin-left: 6.3rem;
}

.header .nav li a {
  font-size: 2rem;
  font-weight: 20rem;
}
/* section1의 자식 요소인 content라는 div하나의 위치를 바꿀 것이므로 부모요소인 section1에 position relative를 주었다. */
.section1 {
  height: 64.4rem;
  background-color: #d3d3d3;
  position: relative;
}

.section1 .content {
  position: absolute;
  top: 0;
/* calc를 사용을 할 때는 사이사이를 띄어 써야 한다. */
  left: calc(50% + 1rem);
  max-width: 50rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;
  border: 1px solid;
}

.section1 .content h2 {
  font-size: 6.2rem;
  text-transform: uppercase;
  font-weight: 500;
}

.section1 .content p {
  font-size: 1.9rem;
  font-weight: 300;
  margin: 1.6rem 0;
}
/* a태그는 인라인 요소이기 때문에 너비 값을 주기 위해 display를 inline block으로 바꿔 주었다.여기에 position relative를 준 이유는 아래에서 화살표 모양을 추가할 거고 position속성으로 위치를 지정할 것이기 때문에 a태그를 부모요소로 지정하기 위해 넣어 준 것 */
.section1 .content a {
  position: relative;
  display: inline-block;
  padding: 0 2rem;
  background-color: #eee;
  width: 15rem;
  font-size: 1.6rem;
  line-height: 3;
  text-transform: uppercase;
  letter-spacing: 0.5rem;
  font-weight: 500;
  border-radius: 3rem;
}
/* border를 아래와 같이 입력하면 삼각형 모양을 만들 수 있고 position속성을 통해 적당한 위치에 위치시킨 다음에 transfrom을 사용해 가운데에 위치하게 해주었다. */
.section1 .content a:after {
  position: absolute;
  display: block;
  content: '';
  border-top: 10px solid transparent;
  border-left: 10px solid black;
  border-bottom: 10px solid transparent;
  top: 50%;
  right: 15px;
  transform:translateY(-50%);
}
/* section2전체를 감싸는 태그에 position relative를 주ㄴ 그 안의 요소들에서 position속성이 사용되었을 경우 부모요소로 */
.section2 {
  position: relative;
  padding: 10rem 0;
  max-width: 1200px;
  margin:auto;
}
.section2 .content {
  text-align: center;
  margin-bottom: 116px;
}

.section2 .content .title {
  font-size: 4.1rem;
}

.section2 .content .text {
  font-size: 1.3rem;
  font-weight: 200;
}

.section2 .image_wrap {
  text-align: center;
  display: flex;
  justify-content: space-between;
}
/* 지금 image가 들어가 있는 li태그가 4개가 있고, 이들을 가로로 정렬을 할 것이고, 사이사이에 간격이 벌어져 있게 할건데, 애초에 기획이 사이사이 간격이 36px이라고 가정해 보자. 그러면 이미지가 4개 이므로 사이사이 간격은 3개가 될 것이고, 36*3을 하면 3간격의 총 합이 108이 나온다. 이 간격을 4개의 이미지가 나눠 가지게 해야 가로를 꽉 채워서 정렬이 될 것이므로, 108을 4로 나누면 27px이 나온다. 그러면 각각의 이미지의 너비를 가로 전체인 100%에서 4로 나눈다. 4로 나눈 값은 각각의 이미지 각각의 간격이 붙은 값일 것이므로, 여기서 27px을 빼주면 가로를 꽉 채울 수 있는 순수 이미지의 가로 너비를 구할 수 있을 것이다. 그런데 4로 나눈 값이 각각의 이미지+오른쪽 간격 이라면 4번째 요소가 가지는 간격은 오른쪽으로 튀어 나갈 것이다.(??) 그러면 그 밑에 last child를 지정해서 오른쪽 마진을 없애주면 된다. */
.section2 .image_wrap li {
  width: calc(100% / 4 -27px);
  margin-right: 36px;
}

.section2 .image_wrap li:last-child {
  margin-right: 0;
}

.section2 .image_wrap li .images {
  height: 272px;
  background-color: #ccc;
}

.section2 .image_wrap li p {
  font-size: 1.7rem;
  font-weight: 400;
  color: #818181;
  margin-top: 20px;
}